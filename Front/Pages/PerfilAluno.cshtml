@page "{userId}"
@model Front.Pages.PerfilAlunoModel
@using Front.Models
@{

}


<header class="linha welcome"
style="
            justify-content: space-between;
            width: 100%;
            height: fit-content;
">
    <div class="coluna" style="--gap: 10px">
        <h1 class="corPreta40B">Perfil de Aluno</h1>
    </div>
</header>


<div class="dashboard coluna" style="--gap: 16px">

    <div class="linha alt_li" style="flex: 1; height: fit-content">
        <div class="linha CardsEngajamento QuadroCards">
            <div class="linha engag" style="flex: 1; align-items: center">
                <div class="iconAzul02">
                    <img src="~/css/icons/formando.svg" alt="Icone_Aluno" />
                </div>
                <div class="coluna" style="--gap: 8px">
                    <h2 class="corPreta40B">@Model.AlunoDetalhes.nome</h2>

                    @if (Model.AlunoLogs.Any())
                    {
                        var ultimoLog = Model.AlunoLogs
                        .OrderByDescending(l => DateTime.Parse(l.date))
                        .FirstOrDefault();

                        DateTime ultimo_acesso = DateTime.Parse(ultimoLog.date);
                        <h5 class="corCinza60B">
                            <span class="corCinza80B">Último Acesso:</span> Dia @ultimo_acesso.Day de @ultimo_acesso.ToString("MMMM") às @ultimo_acesso.Hour:@ultimo_acesso.Minute

                        </h5>
                    }
                </div>
            </div>

            <div class="linha" style="gap: 24px">
                <div class="linha engag" style="flex: 1; align-items: center">
                    @if(Model.Engajamento < 33)
                    {
                        <div class="iconVermelho">
                            <img src="~/css/icons/rostotriste.svg" alt="Icone_Aluno" />
                        </div>
                        <div class="coluna" style="--gap: 4px">
                            <h5 class="corCinza80B">Engajamento Baixo</h5>
                            <h2 class="corVermelha">@Model.Engajamento%</h2>
                        </div>
                    }
                    else if(Model.Engajamento <66)
                    {
                        <div class="iconAzul">
                            <img src="~/css/icons/rostosememocao.svg" alt="Icone_Aluno" />
                        </div>
                        <div class="coluna" style="--gap: 4px">
                            <h5 class="corCinza80B">Engajamento Médio</h5>
                            <h2 class="corAzul">@Model.Engajamento%</h2>
                        </div>
                    }
                    else
                    {
                        <div class="iconVerde">
                            <img src="~/css/icons/rostofeliz.svg" alt="Icone_Aluno" />
                        </div>
                        <div class="coluna" style="--gap: 4px">
                            <h5 class="corCinza80B">Engajamento Alto</h5>
                            <h2 class="corVerde">@Model.Engajamento%</h2>
                        </div>
                    }


                </div>

            </div>
        </div>
    </div>

    <div class="ImputIA linha">
        <img src="~/css/icons/estrelaIA.svg"
        alt="ÍconeHome"
        width="18"
        height="18" />
        <input type="text"
        id="IaPergunta"
        name="nome"
        placeholder="Pergunte a inteligência Artifical!" />
        <a asp-page="/IaChatAluno" asp-route-userId="@Model.AlunoDetalhes.user_id">Gerar</a>
    </div>
    @{
        var abaSelecionada = Request.Query["aba"].ToString();
        if (string.IsNullOrEmpty(abaSelecionada)) abaSelecionada = "1";
    }

    <div class="abas">
        <input type="radio" name="aba" id="aba1" @(abaSelecionada == "1" ? "checked" : "") />
        <input type="radio" name="aba" id="aba2" @(abaSelecionada == "2" ? "checked" : "") />
        <input type="radio" name="aba" id="aba3" @(abaSelecionada == "3" ? "checked" : "") />

        <div class="botoes">
            <label for="aba1">Dashboard</label>
            <label for="aba2">Calendário</label>
            <label for="aba3">Relatórios</label>
            <div class="underline"></div>
        </div>

        <div class="conteudos">
            <div class="conteudo" id="conteudo1" style="flex-direction: row">

                <div class="QuadroCards GraficoEvolucao linha" style="flex: 1; --gap: 40px; flex-wrap: wrap;">
                    <div class="coluna graf_caixa" style="--gap: 16px; flex: 1; min-width: 300px;">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/graficos.svg" />
                            <h4 class="corPreta50B">Evolução</h4>
                            @{
                                var logs = Model.AlunoLogs;
                                if (logs.Any())
                                {
                                    var datas = logs.Select(l => DateTime.Parse(l.date)).ToList();
                                    var mesAntigo = datas.Min().ToString("MMMM", new System.Globalization.CultureInfo("pt-BR"));
                                    var mesAtual = datas.Max().ToString("MMMM", new System.Globalization.CultureInfo("pt-BR"));
                                    <span class="corCinza80B" style="margin-inline-start: auto;">@mesAntigo à @mesAtual</span>
                                }
                            }
                        </div>
                        @{
                            var semanas = Model.SemanasAcessoAluno;
                            int total = semanas.Any() ? semanas.Max() : 0;
                        }
                        <div class="coluna" id="graf01" style="--gap: 8px">
                            <div class="linha" style="height: 240px; justify-content: space-between">
                                <div class="coluna" style="width: 60px">
                                    <p class="corCinza60B" style="margin-bottom: auto">100%</p>
                                    <p class="corCinza60B" style="margin-bottom: auto">80%</p>
                                    <p class="corCinza60B" style="margin-bottom: auto">60%</p>
                                    <p class="corCinza60B" style="margin-bottom: auto">40%</p>
                                    <p class="corCinza60B" style="margin-bottom: auto">20%</p>
                                    <p class="corCinza60B">0%</p>
                                </div>
                                <div class="linha" style="flex: 1; justify-content: space-between">
                                    @foreach (var s in semanas)
                                    {
                                        var porcentagem = total > 0 ? (int)Math.Round((s * 100.0) / total) : 0;
                                        <div class="grafContainer">
                                            <div class="grafCinza"></div>
                                            <div class="grafAzul" style="--Porcentagem: @porcentagem%"></div>
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="linha">
                                <p class="corAzul" style="width: 60px">
                                    <strong>Semanas</strong>
                                </p>
                                <div class="linha" style="flex: 1; justify-content: space-between">
                                    @for (int i2 = 1; i2 <= semanas.Count; i2++)
                                    {
                                        <p class="corCinza60B">@i2</p>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    @{
                        var acoes = Model.AlunoLogs
                        .Select(l =>
                        {
                            if (l.action == "graded" && l.target == "user" && l.component == "core")
                                return "Atividade Concluída";

                            if (l.action == "uploaded" && l.target == "assessable" && l.component == "mod_forum")
                                return "Postagem no Fórum";

                            return null;
                        })
                        .Where(a => a != null)
                        .GroupBy(a => a)
                        .Select(g => new
                        {
                            Acao = g.Key,
                            Quantidade = g.Count()
                        })
                        .ToList();

                        var labels = string.Join(",", acoes.Select(a => $"'{a.Acao}'"));
                        var dados = string.Join(",", acoes.Select(a => a.Quantidade));
                    }
                    <div class="coluna graf_caixa" style="--gap: 16px">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/graficos.svg" />
                            <h4 class="corPreta50B">Ações Realizadas</h4>
                        </div>

                        <div style="max-width: 400px; margin: auto; position: relative;">
                            <canvas id="graficoPizza" width="900" height="240"></canvas>
                        </div>

                        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                        <script>
                            const toggle = document.getElementById('toggleTheme');
                            const ctx = document.getElementById('graficoPizza').getContext('2d');
                            let chart;

                            function criarGrafico() {
                            const isDarkMode = document.documentElement.classList.contains('dark');

                            const coresClaro = ['#003DE5', '#22C55E', '#FF6A6A', '#EAB308'];
                            const coresEscuro = ['#7AAEFF', '#5A8BDD', '#3A69BB', '#1A4799'];

                            const corTexto = isDarkMode ? '#8F98B2' : '#8F98B2';
                            const cores = isDarkMode ? coresEscuro : coresClaro;

                            if (chart) chart.destroy();

                            chart = new Chart(ctx, {
                            type: 'doughnut',
                            data: {
                            labels: [@Html.Raw(labels)],
                            datasets: [{
                            data: [@dados],
                            backgroundColor: cores,
                            borderWidth: 0,
                            }]
                            },
                            options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            rotation: 270,
                            circumference: 360,
                            cutout: '70%',
                            plugins: {
                            legend: {
                            display: true,
                            position: 'right',
                            labels: {
                            boxWidth: 12,
                            usePointStyle: true,
                            pointStyle: 'rectRounded',
                            color: corTexto,
                            font: { size: 14, family: 'Inter' },
                            padding: 20
                            }
                            }
                            }
                            },
                            plugins: [{
                            id: 'centerText',
                            beforeDraw(chart) {
                            const { ctx, chartArea: { left, right, top, bottom } } = chart;
                            const x = (left + right) / 2;
                            const y = (top + bottom) / 2;

                            ctx.save();
                            ctx.font = 'bold 16px Inter';
                            ctx.fillStyle = corTexto;
                            ctx.textAlign = 'center';
                            ctx.textBaseline = 'middle';

                            const texto = '@acoes.Sum(a => a.Quantidade) Ações';
                            ctx.fillText(texto, x, y);
                            ctx.restore();
                            }
                            }]
                            });
                            }

                            if (localStorage.getItem('theme') === 'dark') {
                            document.documentElement.classList.add('dark');
                            toggle.checked = true;
                            }

                            criarGrafico();

                            toggle.addEventListener('change', function () {
                            if (this.checked) {
                            document.documentElement.classList.add('dark');
                            localStorage.setItem('theme', 'dark');
                            } else {
                            document.documentElement.classList.remove('dark');
                            localStorage.setItem('theme', 'light');
                            }
                            criarGrafico();
                            });
                        </script>
                    </div>

                </div> <!-- fecha QuadroCards GraficoEvolucao -->

                <div class="QuadroCards coluna Unidades">
                    <div class="linha" style="--gap: 10px; align-items: center">
                        <img src="~/css/icons/caderno.svg" />
                        <h4 class="corPreta50B">Ações por Curso</h4>
                    </div>
                    @{
                        var acoesPorCurso = Model.AlunoLogs
                        .GroupBy(l => l.course_fullname)
                        .Select(g => new
                        {
                            Curso = g.Key,
                            AtividadesConcluidas = g.Count(l => l.action == "graded" && l.target == "user" && l.component == "core"),
                            ForunsPostados = g.Count(l => l.action == "uploaded" && l.target == "assessable" && l.component == "mod_forum")
                        })
                        .ToList();
                    }

                    @foreach (var curso in acoesPorCurso)
                    {
                        if (curso.AtividadesConcluidas > 0 || curso.ForunsPostados > 0)
                        {
                            var id = curso.Curso.GetHashCode();
                            <div class="caixaResumo">
                                <button class="toggleButton" onclick="toggleDiv('conteudo-@id')">
                                    <h5>@curso.Curso</h5>
                                </button>
                                <div id="conteudo-@id" class="conteudoResumo">
                                    @if (curso.AtividadesConcluidas > 0)
                                    {
                                        <p>Atividades Concluídas: <strong>@curso.AtividadesConcluidas</strong></p>
                                    }
                                    @if (curso.ForunsPostados > 0)
                                    {
                                        <p>Fóruns Postados: <strong>@curso.ForunsPostados</strong></p>
                                    }
                                </div>
                            </div>
                        }
                    }
                    <script>
                        function toggleDiv(id) {
                        const div = document.getElementById(id);
                        div.classList.toggle('aberto');
                        }
                    </script>

                </div> <!-- fecha QuadroCards coluna -->

            </div> <!-- fecha conteudo linha -->

            <div class="conteudo" id="conteudo2">
                <div class="calendario-logs" id="calendario">
                    @{
                        int mes = Convert.ToInt32(Request.Query["mes"]) == 0 ? DateTime.Now.Month : Convert.ToInt32(Request.Query["mes"]);
                        int ano = Convert.ToInt32(Request.Query["ano"]) == 0 ? DateTime.Now.Year : Convert.ToInt32(Request.Query["ano"]);

                        var primeiroDiaMes = new DateTime(ano, mes, 1);
                        int diasNoMes = DateTime.DaysInMonth(ano, mes);
                        int diasAtePrimeiroDia = (int)primeiroDiaMes.DayOfWeek;

                        var logsPorDia = Model.AlunoLogs?
                        .GroupBy(l => DateTime.Parse(l.date).Date)
                        .ToDictionary(g => g.Key, g => g.ToList())
                        ?? new Dictionary<DateTime, List<LogUsuario>>();
                    }

                    <!-- Navegação do mês -->
                    <div class="navegacao-mes">
                        <button onclick="mudarMes(-1)">&#9664;</button>
                        <span class="corPreta50B">@primeiroDiaMes.ToString("MMMM yyyy")</span>
                        <button onclick="mudarMes(1)">&#9654;</button>
                    </div>

                    <!-- Calendário -->
                    <div class="grid-calendario2">
                        <!-- Espaços até o primeiro dia -->
                        @for (int j = 0; j < diasAtePrimeiroDia; j++)
                        {
                            <div class="diaMesInativo"></div>
                        }

                        <!-- Dias do mês -->
                        @for (int i = 1; i <= diasNoMes; i++)
                        {
                            var dataAtual = new DateTime(ano, mes, i);
                            <div class="diaMes @(logsPorDia.ContainsKey(dataAtual) ? "temLog" : "")">
                                <span class="diaspan">@i</span>

                                @if (logsPorDia.ContainsKey(dataAtual))
                                {
                                    foreach (var log in logsPorDia[dataAtual])
                                    {
                                        string acao = log.action switch
                                        {
                                            "graded" when log.target == "user" && log.component == "core" => "Atividade Concluída",
                                            "uploaded" when log.target == "assessable" && log.component == "mod_forum" => "Postagem no Fórum",
                                            _ => null
                                        };

                                        if (acao != null)
                                        {
                                            <div class="item-log">
                                                <span class="acao">@acao</span>
                                                <span class="curso">@log.course_fullname</span>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        }
                    </div>

                    <script>
                        // Função para mudar mês/ano na URL sem reload
                        function mudarMes(direcao) {
                          const urlParams = new URLSearchParams(window.location.search);
                          let mes = parseInt(urlParams.get('mes')) || new Date().getMonth() + 1;
                          let ano = parseInt(urlParams.get('ano')) || new Date().getFullYear();

                          mes += direcao;
                          if (mes < 1) {
                            mes = 12;
                            ano -= 1;
                          }
                          if (mes > 12) {
                            mes = 1;
                            ano += 1;
                          }

                          urlParams.set('mes', mes);
                          urlParams.set('ano', ano);

                          // Recarrega a página com a URL atualizada para atualizar o calendário
                          window.location.href = window.location.pathname + '?' + urlParams.toString() + window.location.hash;
                        }

                        // Ao carregar a página, marca a aba certa com base na URL
                        window.addEventListener('DOMContentLoaded', () => {
                          const urlParams = new URLSearchParams(window.location.search);
                          const abaSelecionada = urlParams.get('aba') || '1'; // padrão aba1

                          // Marca o input radio correspondente
                          const inputSelecionado = document.getElementById('aba' + abaSelecionada);
                          if (inputSelecionado) {
                            inputSelecionado.checked = true;
                          }

                          // Adiciona listener para trocar aba e atualizar URL
                          document.querySelectorAll('.botoes label').forEach((label, index) => {
                            label.addEventListener('click', () => {
                              const params = new URLSearchParams(window.location.search);
                              params.set('aba', (index + 1).toString());
                              history.replaceState(null, '', window.location.pathname + '?' + params.toString() + window.location.hash);
                            });
                          });
                        });
                    </script>

                </div>
            </div>



            <div class="conteudo" id="conteudo3"></div>
        </div>

    </div>
</div>