@page "{userId}"
@model Front.Pages.PerfilAlunoModel
@using Front.Models
@{

}


<header class="linha welcome"
style="
            justify-content: space-between;
            width: 100%;
            height: fit-content;
">
    <div class="coluna" style="--gap: 10px">
        <h1 class="corPreta40B">Perfil de Aluno</h1>
    </div>
</header>


<div class="dashboard coluna" style="--gap: 16px">

    <div class="linha alt_li" style="flex: 1; height: fit-content">
        <div class="linha CardsEngajamento QuadroCards">
            <div class="linha engag" style="flex: 1; align-items: center">
                <div class="iconAzul02">
                    <img src="~/css/icons/formando.svg" alt="Icone_Aluno" />
                </div>
                <div class="coluna" style="--gap: 8px">
                    <div class="linha" style="align-items: center">
                        <h2 class="corPreta40B">@Model.User.name</h2>
                        <input type="checkbox" style="display: none" id="favCurso" @(FavoritoService.EhFavorito(@Model.User.name) ? "checked" : "")
                        onchange="alunoFavorito(this)" />
                        <label for="favCurso">
                            <img id="imgFavCurso" src="@Url.Content(FavoritoService.EhFavorito(@Model.User.user_id) ? "~/css/icons/estrela.svg" : "~/css/icons/estrela_inativa.svg")" height="20" />
                        </label>

                        <script>
                            async function alunoFavorito(checkbox) {
                            const checked = checkbox.checked;
                            const aluno = '@Model.User.user_id';
                            const nome = '@Model.User.name';
                            const img = document.getElementById('imgFavCurso');

                            // Trocar a imagem já no clique
                            img.src = checked ? '/css/icons/estrela.svg' : '/css/icons/estrela_inativa.svg';

                            const url = checked
                            ? `/api/favoritos/adicionar_aluno?nome=${encodeURIComponent(nome)}&id=${encodeURIComponent(aluno)}`
                            : `/api/favoritos/remover_aluno?nome=${encodeURIComponent(nome)}&id=${encodeURIComponent(aluno)}`;

                            try {
                            const response = await fetch(url, { method: 'POST' });
                            if (!response.ok) {
                            alert('Erro ao atualizar favoritos');
                            checkbox.checked = !checked;
                            img.src = checkbox.checked ? '/css/icons/estrela.svg' : '/css/icons/estrela_inativa.svg';
                            }
                            } catch (err) {
                            alert('Erro na requisição');
                            checkbox.checked = !checked;
                            img.src = checkbox.checked ? '/css/icons/estrela.svg' : '/css/icons/estrela_inativa.svg';
                            }
                            }
                        </script>
                    </div>


                    @if (Model.AlunoLogs.Any())
                    {
                        var ultimoLog = Model.AlunoLogs
                        .OrderByDescending(l => DateTime.Parse(l.date))
                        .FirstOrDefault();

                        DateTime ultimo_acesso = DateTime.Parse(ultimoLog.date);
                        <h5 class="corCinza60B">
                            <span class="corCinza80B">Último Acesso:</span> Dia @ultimo_acesso.Day de @ultimo_acesso.ToString("MMMM") às @ultimo_acesso.Hour:@ultimo_acesso.Minute

                        </h5>
                    }
                </div>
            </div>

            <div class="linha" style="gap: 24px">
                <div class="linha engag" style="flex: 1; align-items: center">
                    @if(Model.Engajamento < 33)
                    {
                        <div class="iconVermelho">
                            <img src="~/css/icons/rostotriste.svg" alt="Icone_Aluno" />
                        </div>
                        <div class="coluna" style="--gap: 4px">
                            <h5 class="corCinza80B">Engajamento Baixo</h5>
                            <h2 class="corVermelha">@Model.Engajamento%</h2>
                        </div>
                    }
                    else if(Model.Engajamento <66)
                    {
                        <div class="iconAzul">
                            <img src="~/css/icons/rostosememocao.svg" alt="Icone_Aluno" />
                        </div>
                        <div class="coluna" style="--gap: 4px">
                            <h5 class="corCinza80B">Engajamento Médio</h5>
                            <h2 class="corAzul">@Model.Engajamento%</h2>
                        </div>
                    }
                    else
                    {
                        <div class="iconVerde">
                            <img src="~/css/icons/rostofeliz.svg" alt="Icone_Aluno" />
                        </div>
                        <div class="coluna" style="--gap: 4px">
                            <h5 class="corCinza80B">Engajamento Alto</h5>
                            <h2 class="corVerde">@Model.Engajamento%</h2>
                        </div>
                    }


                </div>

            </div>
        </div>
    </div>

    <div class="ImputIA linha">
        <img src="~/css/icons/estrelaIA.svg"
        alt="ÍconeHome"
        width="18"
        height="18" />
        <input type="text"
        id="IaPergunta"
        name="nome"
        placeholder="Pergunte a inteligência Artifical!" />
        <a asp-page="/IaChatAluno" asp-route-userId="@Model.User.user_id">Gerar</a>
    </div>
    @{
        var abaSelecionada = Request.Query["aba"].ToString();
        if (string.IsNullOrEmpty(abaSelecionada)) abaSelecionada = "1";
    }

    <div class="abas">
        <input type="radio" name="aba" id="aba1" @(abaSelecionada == "1" ? "checked" : "") />
        <input type="radio" name="aba" id="aba2" @(abaSelecionada == "2" ? "checked" : "") />
        <input type="radio" name="aba" id="aba3" @(abaSelecionada == "3" ? "checked" : "") />

        <div class="botoes">
            <label for="aba1">Dashboard</label>
            <label for="aba2">Calendário</label>
            <label for="aba3">Relatórios</label>
            <div class="underline"></div>
        </div>

        <div class="conteudos">
            <div class="conteudo" id="conteudo1" style="flex-direction: row">

                <div class="QuadroCards GraficoEvolucao linha"
                style="flex: 1; --gap: 16px">



                    <div class="coluna graf_caixa" style="--gap: 16px; flex: 1">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/graficos.svg" />
                            <h4 class="corPreta50B">Ações Realizadas</h4>
                        </div>

                        @using System.Globalization

                        @{
                            var acoesFixas = new Acoes().ListarAcoes();

                            string AcaoDe(string a, string t, string c) =>
                            acoesFixas.FirstOrDefault(x => x.action == a && x.target == t && x.component == c)?.nome_acao ?? "Outros";

                            var cal = CultureInfo.CurrentCulture.Calendar;

                            // Processa todos os logs de uma vez só
                            var logsProcessados = Model.AlunoLogs
                            .Select(l => new
                            {
                                Semana = cal.GetWeekOfYear(DateTime.Parse(l.date), CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday),
                                Ano = DateTime.Parse(l.date).Year,
                                Nome = AcaoDe(l.action, l.target, l.component)
                            })
                            .ToList();

                            // Agrupamento por semana (gráfico de barras empilhadas)
                            var grupos = logsProcessados
                            .GroupBy(x => new { x.Ano, x.Semana, x.Nome })
                            .Select(g => new
                            {
                                g.Key.Ano,
                                g.Key.Semana,
                                Acao = g.Key.Nome,
                                Qtde = g.Count()
                            })
                            .OrderBy(g => g.Ano).ThenBy(g => g.Semana)
                            .ToList();

                            var semanasOrdenadas = grupos
                            .Select(g => new { g.Ano, g.Semana })
                            .Distinct()
                            .OrderBy(s => s.Ano).ThenBy(s => s.Semana)
                            .ToList();

                            var labels1 = semanasOrdenadas.Select((s, i) => (i + 1).ToString()).ToList();
                            var nomesAcoes = grupos.Select(g => g.Acao).Distinct().ToList();

                            var datasets = nomesAcoes.Select((nome, idx) => new
                            {
                                label = nome,
                                data = semanasOrdenadas.Select(s =>
                                grupos.FirstOrDefault(g =>
                                g.Ano == s.Ano && g.Semana == s.Semana && g.Acao == nome
                                )?.Qtde ?? 0).ToList(),
                                backgroundColor = $"hsl({idx * 60},70%,60%)",
                                stack = "stack1",
                                borderRadius = 10,
                                barPercentage = 0.5,
                                categoryPercentage = 0.8
                            }).ToList();

                            var anosArray = semanasOrdenadas.Select(s => s.Ano).ToList();
                            var semanasArray = semanasOrdenadas.Select(s => s.Semana).ToList();

                            var lblJson = System.Text.Json.JsonSerializer.Serialize(labels1);
                            var dsJson = System.Text.Json.JsonSerializer.Serialize(datasets);
                            var anosJson = System.Text.Json.JsonSerializer.Serialize(anosArray);
                            var semanasJson = System.Text.Json.JsonSerializer.Serialize(semanasArray);

                            // Agrupamento simples por ação (gráfico de pizza, por exemplo)
                            var acoes = logsProcessados
                            //.Where(x => x.Nome != "Outros") // remover filtro para incluir "Outros"
                            .GroupBy(x => x.Nome)
                            .Select(g => new
                            {
                                Acao = g.Key,
                                Quantidade = g.Count()
                            })
                            .ToList();

                            var labels = string.Join(",", acoes.Select(a => $"'{a.Acao}'"));
                            var dados = string.Join(",", acoes.Select(a => a.Quantidade));
                        }




                        <canvas id="graficoLogs"></canvas>

                    </div>

                    <div class="coluna graf_caixa" style="--gap: 16px; flex: 1">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/graficos.svg" />
                            <h4 class="corPreta50B">Ações Realizadas</h4>
                        </div>




                        <div style="max-width: 400px; margin: auto; position: relative;">
                            <canvas id="graficoPizza" width="900" height="240"></canvas>
                        </div>

                        <script>
                            const toggle = document.getElementById('toggleTheme');
                            const ctxBarras = document.getElementById('graficoLogs')?.getContext('2d');
                            const ctxPizza = document.getElementById('graficoPizza')?.getContext('2d');

                            const anos = @Html.Raw(anosJson);
                            const semanas = @Html.Raw(semanasJson);

                            const acoesComOutros = [
                            @foreach (var acao in acoes)
                            {
                                @: { label: @Html.Raw(System.Text.Json.JsonSerializer.Serialize(acao.Acao)), quantidade: @acao.Quantidade },
                            }
                            ];

                            const totalAcoes = @acoes.Sum(a => a.Quantidade);
                            const totalLog = @Model.AlunoLogs.Count;
                            const quantidadeOutros = totalLog - totalAcoes;
                            if (quantidadeOutros > 0) acoesComOutros.push({ label: 'Outros', quantidade: quantidadeOutros });

                            const labelsPizza = acoesComOutros.map(a => a.label);
                            const dadosPizza = acoesComOutros.map(a => a.quantidade);

                            const coresClaro = ['#002899', '#0036cc', '#99b4ff', '#ccd9ff'];
                            const coresEscuro = ['#7AAEFF', '#5A8BDD', '#3A69BB', '#1A4799', '#555555'];

                            const getDateRange = (year, week) => {
                              const simple = new Date(year, 0, 1 + (week - 1) * 7);
                              const dow = simple.getDay();
                              const ISOweekStart = new Date(simple);
                              ISOweekStart.setDate(simple.getDate() - dow + (dow <= 4 ? 1 : 8));
                              const ISOweekEnd = new Date(ISOweekStart);
                              ISOweekEnd.setDate(ISOweekStart.getDate() + 6);
                              const f = d => d.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit' });
                              return `${f(ISOweekStart)} à ${f(ISOweekEnd)}`;
                            };

                            let graficoBarras, graficoPizza;

                            function criarGraficos() {
                              const isDark = document.documentElement.classList.contains('dark');
                              const cores = isDark ? coresEscuro : coresClaro;
                              const corTexto = '#8F98B2';

                              if (ctxBarras) {
                                if (graficoBarras) graficoBarras.destroy();
                                const chartData = {
                                  labels: @Html.Raw(lblJson),
                                  datasets: @Html.Raw(dsJson)
                                };
                                chartData.datasets.forEach((ds, i) => {
                                  ds.backgroundColor = cores[i % cores.length];
                                  ds.borderWidth = 0;
                                });
                                const totaisPorSemana = chartData.labels.map((_, i) =>
                                  chartData.datasets.reduce((s, ds) => s + ds.data[i], 0)
                                );
                                graficoBarras = new Chart(ctxBarras, {
                                  type: 'bar',
                                  data: chartData,
                                  options: {
                                    responsive: true,
                                    maintainAspectRatio: true,
                                    plugins: {
                                      tooltip: {
                                        mode: 'index',
                                        intersect: false,
                                        callbacks: {
                                          title: ctx => {
                                            const i = ctx[0].dataIndex;
                                            return `(${getDateRange(anos[i], semanas[i])})`;
                                          },
                                          label: ctx => {
                                            const val = ctx.parsed.y;
                                            if (val === 0) return null;
                                            const total = ctx.chart.data.datasets.reduce((s, ds) => s + ds.data[ctx.dataIndex], 0);
                                            const pct = total ? ((val / total) * 100).toFixed(1) : 0;
                                            return `${ctx.dataset.label}: ${val} (${pct}%)`;
                                          }
                                        }
                                      },
                                      legend: { display: false }
                                    },
                                    scales: {
                                      x: {
                                        stacked: true,
                                        grid: { display: false },
                                        ticks: { color: corTexto, font: { family: 'Inter, sans-serif', size: 10, weight: '500' } }
                                      },
                                      y: {
                                        stacked: true,
                                        beginAtZero: true,
                                        grid: { display: false },
                                        ticks: {
                                          color: corTexto,
                                          font: { family: 'Inter, sans-serif', size: 10, weight: '500' },
                                          callback: v => {
                                            const max = Math.max(...totaisPorSemana);
                                            return max ? ((v / max) * 100).toFixed(0) + '%' : '0%';
                                          }
                                        }
                                      }
                                    }
                                  }
                                });
                              }

                              if (ctxPizza) {
                                if (graficoPizza) graficoPizza.destroy();
                                graficoPizza = new Chart(ctxPizza, {
                                  type: 'doughnut',
                                  data: {
                                    labels: labelsPizza,
                                    datasets: [{
                                      data: dadosPizza,
                                      backgroundColor: cores.slice(0, labelsPizza.length),
                                      borderWidth: 0,
                                    }]
                                  },
                                  options: {
                                    responsive: true,
                                    maintainAspectRatio: false,
                                    rotation: 270,
                                    cutout: '70%',
                                    plugins: {
                                      legend: {
                                        display: true,
                                        position: 'right',
                                        labels: {
                                          boxWidth: 12,
                                          usePointStyle: true,
                                          pointStyle: 'rectRounded',
                                          color: corTexto,
                                          font: { size: 14, family: 'Inter' },
                                          padding: 20
                                        },
                                        onClick: (e, item) => {
                                          const label = item.text;
                                          const idxPizza = graficoPizza.data.labels.indexOf(label);
                                          graficoPizza.getDatasetMeta(0).data[idxPizza].hidden = !graficoPizza.getDatasetMeta(0).data[idxPizza].hidden;
                                          graficoPizza.update();

                                          const idxBarra = graficoBarras.data.datasets.findIndex(ds => ds.label === label);
                                          if (idxBarra !== -1) {
                                            const ds = graficoBarras.data.datasets[idxBarra];
                                            ds.hidden = !ds.hidden;
                                            graficoBarras.update();
                                          }
                                        }
                                      }
                                    }
                                  },
                                  plugins: [{
                                    id: 'centerText',
                                    beforeDraw(chart) {
                                      const { ctx, chartArea: { left, right, top, bottom } } = chart;
                                      ctx.save();
                                      ctx.font = 'bold 16px Arial, Inter, sans-serif';
                                      ctx.fillStyle = corTexto;
                                      ctx.textAlign = 'center';
                                      ctx.textBaseline = 'middle';
                                      const total = dadosPizza.reduce((a, b) => a + b, 0);
                                      ctx.fillText(`${total} Ações`, (left + right) / 2, (top + bottom) / 2);
                                      ctx.restore();
                                    }
                                  }]
                                });
                              }
                            }

                            if (localStorage.getItem('theme') === 'dark') {
                              document.documentElement.classList.add('dark');
                              if (toggle) toggle.checked = true;
                            }

                            criarGraficos();

                            toggle?.addEventListener('change', () => {
                              if (toggle.checked) {
                                document.documentElement.classList.add('dark');
                                localStorage.setItem('theme', 'dark');
                              } else {
                                document.documentElement.classList.remove('dark');
                                localStorage.setItem('theme', 'light');
                              }
                              criarGraficos();
                            });
                        </script>






                    </div>


                </div>

                <div class="QuadroCards coluna Unidades">
                    <div class="linha" style="--gap: 10px; align-items: center">
                        <img src="~/css/icons/caderno.svg" />
                        <h4 class="corPreta50B">Ações por Curso</h4>
                    </div>
                    @{
                        var acoesPorCurso = Model.AlunoLogs
                        .GroupBy(l => l.course_fullname)
                        .Select(g => new
                        {
                            Curso = g.Key,
                            AtividadesConcluidas = g.Count(l => l.action == "graded" && l.target == "user" && l.component == "core"),
                            ForunsPostados = g.Count(l => l.action == "uploaded" && l.target == "assessable" && l.component == "mod_forum")
                        })
                        .ToList();
                    }

                    @foreach (var curso in acoesPorCurso)
                    {
                        if (curso.AtividadesConcluidas > 0 || curso.ForunsPostados > 0)
                        {
                            var id = curso.Curso.GetHashCode();
                            <div class="caixaResumo">
                                <button class="toggleButton" onclick="toggleDiv('conteudo-@id')">
                                    <h5>@curso.Curso</h5>
                                </button>
                                <div id="conteudo-@id" class="conteudoResumo">
                                    @if (curso.AtividadesConcluidas > 0)
                                    {
                                        <p>Atividades Concluídas: <strong>@curso.AtividadesConcluidas</strong></p>
                                    }
                                    @if (curso.ForunsPostados > 0)
                                    {
                                        <p>Fóruns Postados: <strong>@curso.ForunsPostados</strong></p>
                                    }
                                </div>
                            </div>
                        }
                    }
                    <script>
                        function toggleDiv(id) {
                        const div = document.getElementById(id);
                        div.classList.toggle('aberto');
                        }
                    </script>

                </div> <!-- fecha QuadroCards coluna -->

            </div> <!-- fecha conteudo linha -->

            <div class="conteudo" id="conteudo2">
                <div class="calendario-logs QuadroCards" id="calendario">
                    @{
                        int mes = Convert.ToInt32(Request.Query["mes"]) == 0 ? DateTime.Now.Month : Convert.ToInt32(Request.Query["mes"]);
                        int ano = Convert.ToInt32(Request.Query["ano"]) == 0 ? DateTime.Now.Year : Convert.ToInt32(Request.Query["ano"]);

                        var primeiroDiaMes = new DateTime(ano, mes, 1);
                        int diasNoMes = DateTime.DaysInMonth(ano, mes);
                        int diasAtePrimeiroDia = (int)primeiroDiaMes.DayOfWeek;

                        var logsPorDia = Model.AlunoLogs?
                        .GroupBy(l => DateTime.Parse(l.date).Date)
                        .ToDictionary(g => g.Key, g => g.ToList())
                        ?? new();
                    }

                    <div class="navegacao-mes linha" style="flex: 1; margin-bottom: 20px; align-items: center">
                        @{
                            var mesAno = primeiroDiaMes.ToString("MMMM yyyy");
                            var mesAnoCapitalizado = char.ToUpper(mesAno[0]) + mesAno[1..];
                        }
                        <div class="linha" style="--gap: 10px; align-items: center; margin-right: auto">
                            <img src="~/css/icons/calendario.svg" height="20" />
                            <h3 class="corPreta50B" style="flex: 1;">@mesAnoCapitalizado</h3>
                        </div>

                        <div class="linha" style="gap: 8px">
                            <button class="btn_seta" onclick="mudarMes(-1)">⟵</button>
                            <button class="btn_seta" onclick="mudarMes(1)">⟶</button>
                        </div>
                    </div>

                    <div class="grid-calendario2">
                        @foreach (var dia in new[] { "Domingo", "Segunda", "Terça", "Quarta", "Quinta", "Sexta", "Sabado" })
                        {
                            <span class="NomeDiaSemana">@dia</span>
                        }

                        @for (int j = 0; j < diasAtePrimeiroDia; j++)
                        {
                            <div class="diaMesInativo"></div>
                        }

                        @for (int i = 1; i <= diasNoMes; i++)
                        {
                            var dataAtual = new DateTime(ano, mes, i);
                            var id = $"{dataAtual.Day}_{dataAtual.Month}";
                            var possuiLog = logsPorDia.ContainsKey(dataAtual);
                            var logsDoDia = possuiLog ? logsPorDia[dataAtual] : null;

                            <div id="@id" onclick="AbreDia('@id')" class="diaMes @(possuiLog ? "temLog" : "")">
                                <div class="linha">
                                    <span class="diaspan" style="flex: 1">@i</span>

                                    @if (possuiLog)
                                    {

                                        var totalLogs = logsDoDia.Count(l =>
                                        AcaoDe(l.action, l.target, l.component) != "Outros");

                                        if (totalLogs > 1)
                                        {
                                            <span class="mais_dia">+<span>@(totalLogs - 1)</span></span>
                                        }
                                    }
                                </div>

                                @if (possuiLog)
                                {
                                    foreach (var log in logsDoDia)
                                    {
                                        string? acao = AcaoDe(log.action, log.target, log.component);

                                        if (acao != null && acao != "Outros")
                                        {
                                            <div class="item-log">
                                                <span class="acao">@acao</span>
                                                <span class="acao">@DateTime.Parse(log.date).ToString("HH:mm")</span>
                                                <span class="curso">@log.course_fullname</span>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                        }
                    </div>

                    <script>
                        function AbreDia(id) {
                            const elemento = document.getElementById(id);
                            if (!elemento) return console.warn('Elemento não encontrado:', id);

                            const jaAberto = elemento.classList.contains('diaMesAberto');
                            document.querySelectorAll('.diaMes, .diaMesAberto, .temLog').forEach(dia => {
                                dia.className = dia.className.replace('diaMesAberto', 'diaMes').trim();
                            });

                            if (!jaAberto) elemento.className = 'diaMesAberto';
                        }

                        function mudarMes(direcao) {
                            const urlParams = new URLSearchParams(window.location.search);
                            let mes = parseInt(urlParams.get('mes')) || new Date().getMonth() + 1;
                            let ano = parseInt(urlParams.get('ano')) || new Date().getFullYear();

                            mes += direcao;
                            if (mes < 1) { mes = 12; ano--; }
                            if (mes > 12) { mes = 1; ano++; }

                            urlParams.set('mes', mes);
                            urlParams.set('ano', ano);
                            window.location.href = window.location.pathname + '?' + urlParams + window.location.hash;
                        }

                        window.addEventListener('DOMContentLoaded', () => {
                            const urlParams = new URLSearchParams(window.location.search);
                            const aba = urlParams.get('aba') || '1';
                            const input = document.getElementById('aba' + aba);
                            if (input) input.checked = true;

                            document.querySelectorAll('.botoes label').forEach((label, i) => {
                                label.addEventListener('click', () => {
                                    const params = new URLSearchParams(window.location.search);
                                    params.set('aba', (i + 1).toString());
                                    history.replaceState(null, '', window.location.pathname + '?' + params + window.location.hash);
                                });
                            });
                        });
                    </script>
                </div>
            </div>



            <div class="conteudo" id="conteudo3"></div>
        </div>

    </div>
</div>