@page "{curso}"
@model Front.Pages.DashboardModel
@{
    ViewData["Title"] = "Dashboard do Curso";
}


<header class="linha welcome"
style="
            justify-content: space-between;
            width: 100%;
            height: fit-content;
">
    <div class="coluna" style="--gap: 10px">
        <span class="SubH1 corAzul">Bem Vindo(a)</span>
        <h1 class="corPreta40B">@Model.Cursos.curso</h1>
    </div>
    <button onclick="location.reload()" class="botaoatualiza">Atualizar</button>
</header>
<!--
<div class="linha Endereco" style="align-items: center">
<img src="~/css/icons/casa.svg" alt="ÍconeHome" width="14" height="14" />
<span class="SubH3">></span>
<a class="SubH3">Cursos</a>
<span class="SubH3">></span>
<a class="SubH3">Ciênca da Computação</a>
<span class="SubH3">></span>
<a class="SubH3">Metodologias Ágeis</a>
</div>
-->
<div class="dashboard coluna" style="--gap: 10px">
    <div class="ImputIA linha">
        <img src="~/css/icons/estrelaIA.svg"
        alt="ÍconeHome"
        width="18"
        height="18" />
        <input type="text"
        id="IaPergunta"
        name="nome"
        placeholder="Pergunte a inteligência Artifical!" />
        <a asp-page="/IaChatCurso" asp-route-cursoNome="@Model.Cursos.curso">Gerar</a>
    </div>

    <div class="abas">
        <input type="radio" name="aba" id="aba1" checked />
        <input type="radio" name="aba" id="aba2" />
        <input type="radio" name="aba" id="aba3" />

        <div class="botoes">
            <label for="aba1">Dashboard</label>
            <label for="aba2">Alunos</label>
            <label for="aba3">Relatórios</label>
            <div class="underline"></div>
        </div>

        <div class="conteudos">
            <div class="conteudo" id="conteudo1">
                <div class="linha alt_li" style="flex: 1; height: fit-content">
                    <div class="linha CardsEngajamento QuadroCards">
                        <div class="linha engag" style="flex: 1; align-items: center">
                            <div class="iconVerde">
                                <img src="~/css/icons/rostofeliz.svg" alt="Icone_Aluno" />
                            </div>
                            <div class="coluna" style="--gap: 4px">
                                <h5 class="corCinza70B">Engajamento Alto</h5>
                                <h2 class="corVerde">
                                @{
                                        var total_ = Model.AlunosEngajamento.Count;
                                        var engagAlto = total_ == 0 ? 0 : (int)((Model.AlunosEngajamento.Count(l => l.Engajamento > 66) * 100.0) / total_);
                                        var engagMedio = total_ == 0 ? 0 : (int)((Model.AlunosEngajamento.Count(l => l.Engajamento <= 66 && l.Engajamento >= 33) * 100.0) / total_);
                                        var engagBaixo = total_ == 0 ? 0 : (int)((Model.AlunosEngajamento.Count(l => l.Engajamento < 33) * 100.0) / total_);

                                } @engagAlto%</h2>
                            </div>
                        </div>

                        <div class="linha engag" style="flex: 1; align-items: center">
                            <div class="iconAzul">
                                <img src="~/css/icons/rostosememocao.svg" alt="Icone_Aluno" />
                            </div>
                            <div class="coluna" style="--gap: 4px">
                                <h5 class="corCinza70B">Engajamento Médio</h5>
                                <h2 class="corAzul">@engagMedio%</h2>
                            </div>
                        </div>

                        <div class="linha engag" style="flex: 1; align-items: center">
                            <div class="iconVermelho">
                                <img src="~/css/icons/rostotriste.svg" alt="Icone_Aluno" />
                            </div>
                            <div class="coluna" style="--gap: 4px">
                                <h5 class="corCinza70B">Engajamento Baixo</h5>
                                <h2 class="corVermelha">@engagBaixo%</h2>
                            </div>
                        </div>
                    </div>
                    <div class="linha QuantAlunos">
                        <div class="iconEscuro">
                            <img src="~/css/icons/formando.svg" alt="Icone_Aluno" />
                        </div>
                        <div class="coluna" style="--gap: 4px">
                            <h4 class="corCinza100B">Alunos</h4>
                            <h2 class="corCinza100B">@Model.Cursos.alunos</h2>
                        </div>
                    </div>
                </div>
                <div class="linha alt_li" style="flex: 1">
                    <div class="QuadroCards GraficoEvolucao linha"
                    style="flex: 1; --gap: 40px">


                        <div class="coluna" style="--gap: 16px; height: 100%;">
                            <div class="linha" style="--gap: 10px; align-items: center">
                                <img src="~/css/icons/graficos.svg" />
                                <h4 class="corPreta50B">Evolução</h4>
                                @{
                                    var logs = Model.Cursos.Logs;
                                    if (logs.Any())
                                    {
                                        var datas = logs.Select(l => DateTime.Parse(l.date)).ToList();
                                        var mesAntigo = datas.Min().ToString("MMMM", new System.Globalization.CultureInfo("pt-BR"));
                                        var mesAtual = datas.Max().ToString("MMMM", new System.Globalization.CultureInfo("pt-BR"));
                                        <span class="corCinza80B" style="margin-inline-start: auto;">@mesAntigo à @mesAtual</span>
                                    }

                                }

                            </div>


                            @{
                                var semanas = Model.Cursos.Semanas;
                                int total = semanas.Any() ? semanas.Max() : 0;
                            }

                            <div class="coluna" id="graf01" style="--gap: 8px">
                                <div class="linha" style="height: 240px; justify-content: space-between">
                                    <div class="coluna" style="width: 60px">
                                        <p class="corCinza60B" style="margin-bottom: auto">100%</p>
                                        <p class="corCinza60B" style="margin-bottom: auto">80%</p>
                                        <p class="corCinza60B" style="margin-bottom: auto">60%</p>
                                        <p class="corCinza60B" style="margin-bottom: auto">40%</p>
                                        <p class="corCinza60B" style="margin-bottom: auto">20%</p>
                                        <p class="corCinza60B">0%</p>
                                    </div>
                                    <div class="linha" style="flex: 1; justify-content: space-between">
                                        @foreach (var s in semanas)
                                        {
                                            var porcentagem = total > 0 ? (int)Math.Round((s * 100.0) / total) : 0;
                                            <div class="grafContainer">
                                                <div class="grafCinza"></div>
                                                <div class="grafAzul" style="--Porcentagem: @porcentagem%"></div>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="linha">
                                    <p class="corAzul" style="width: 60px"><strong>Semanas</strong></p>
                                    <div class="linha" style="flex: 1; justify-content: space-between">
                                        @for (int i2 = 1; i2 <= semanas.Count; i2++)
                                        {
                                            <p class="corCinza60B" style="text-align: center; width: 10px">@i2</p>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>

                        @{
                            var acoes = Model.Cursos.Logs
                            .Select(l =>
                            {
                                if (l.action == "graded" && l.target == "user" && l.component == "core")
                                    return "Atividade Concluída";

                                if (l.action == "uploaded" && l.target == "assessable" && l.component == "mod_forum")
                                    return "Postagem no Fórum";

                                // if(l.action == "viewed")
                                // {
                                //     return "Visualização";
                                // }

                                return null; // Ignora outros
                            })
                            .Where(a => a != null) // Filtra nulos (não considerados)
                            .GroupBy(a => a)
                            .Select(g => new
                            {
                                Acao = g.Key,
                                Quantidade = g.Count()
                            })
                            .ToList();

                            var labels = string.Join(",", acoes.Select(a => $"'{a.Acao}'"));
                            var dados = string.Join(",", acoes.Select(a => a.Quantidade));
                        }

                        <div class="coluna graf_caixa" style="--gap: 16px">
                            <div class="linha" style="--gap: 10px; align-items: center">
                                <img src="~/css/icons/graficos.svg" />
                                <h4 class="corPreta50B">Ações Realizadas</h4>
                                @* <span class="corCinza80B" style="margin-inline-start: auto;">
                                    @acoes.Sum(a => a.Quantidade) Ações
                                </span> *@
                            </div>




                            <div style="max-width: 400px; margin: auto; position: relative;">
                                <canvas id="graficoPizza" width="900" height="240"></canvas>
                            </div>

                            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
                            <script>
                                const toggle = document.getElementById('toggleTheme');
                                const ctx = document.getElementById('graficoPizza').getContext('2d');
                                let chart; // variável global pro gráfico

                                function criarGrafico() {
                                const isDarkMode = document.documentElement.classList.contains('dark');

                                const coresClaro = ['#003DE5', '#22C55E', '#FF6A6A',  '#EAB308',];
                                const coresEscuro = ['#7AAEFF', '#5A8BDD', '#3A69BB', '#1A4799'];

                                const corTexto = isDarkMode ? '#8F98B2' : '#8F98B2';
                                const cores = isDarkMode ? coresEscuro : coresClaro;

                                // Se já existe um gráfico, destrói ele
                                if (chart) chart.destroy();

                                chart = new Chart(ctx, {
                                type: 'doughnut',
                                data: {
                                labels: [@Html.Raw(labels)],
                                datasets: [{
                                data: [@dados],
                                backgroundColor: cores,
                                borderWidth: 0,

                                }]
                                },
                                options: {
                                responsive: true,
                                maintainAspectRatio: false,
                                rotation: 270,
                                circumference: 360,
                                cutout: '70%',
                                plugins: {
                                legend: {
                                display: true,
                                position: 'right',
                                labels: {
                                boxWidth: 12,
                                usePointStyle: true,
                                pointStyle: 'rectRounded',
                                color: corTexto,
                                font: { size: 14, family: 'Inter' },
                                padding: 20
                                }
                                }
                                }

                                },
                                plugins: [{
                                id: 'centerText',
                                beforeDraw(chart) {
                                const {ctx, chartArea: {left, right, top, bottom}} = chart;
                                const x = (left + right) / 2;
                                const y = (top + bottom) / 2;

                                ctx.save();
                                ctx.font = 'bold 16px Inter';
                                ctx.fillStyle = corTexto;
                                ctx.textAlign = 'center';
                                ctx.textBaseline = 'middle';

                                const texto = '@acoes.Sum(a => a.Quantidade) Ações';
                                ctx.fillText(texto, x, y);
                                ctx.restore();
                                }
                                }]
                                });
                                }

                                // Aplica o tema salvo ao carregar
                                if (localStorage.getItem('theme') === 'dark') {
                                document.documentElement.classList.add('dark');
                                toggle.checked = true;
                                }

                                criarGrafico(); // Cria o gráfico inicialmente

                                toggle.addEventListener('change', function () {
                                if (this.checked) {
                                document.documentElement.classList.add('dark');
                                localStorage.setItem('theme', 'dark');
                                } else {
                                document.documentElement.classList.remove('dark');
                                localStorage.setItem('theme', 'light');
                                }
                                criarGrafico(); // Atualiza o gráfico quando muda o tema
                                });
                            </script>


                        </div>






                    </div>
                    <div class="QuadroCards Unidades coluna">
                        <div class="linha" style="--gap: 10px; align-items: center">
                            <img src="~/css/icons/alunosDesistentes.png" />
                            <h4 class="corPreta50B">Posíveis Desistentes</h4>
                        </div>
                        <div class="tabela-card">
                            <table>
                                <tbody id="tabela-alunos">
                                    @{
                                        var alunosMenosAtivos = Model.AlunosEngajamento
                                        .Where(a => a.Engajamento < 30)
                                        .OrderBy(a => a.Engajamento)
                                        .ToList();

                                        int posicao = 1;
                                    }

                                    @foreach (var l in alunosMenosAtivos)
                                    {
                                        var engajamentoFormatado = l.Engajamento < 0
                                        ? $"{l.Engajamento.ToString("0.0")}%"
                                        : $"{l.Engajamento.ToString("0")}%";

                                        <tr class="linha @(posicao > 5 ? "escondido" : "")">
                                            <td style="width: 14px">@posicao</td>
                                            <td style="flex: 1">
                                                <a asp-page="/PerfilAluno" asp-route-userId="@l.UserId">@l.Nome</a>
                                            </td>
                                            <td>@engajamentoFormatado</td>
                                        </tr>
                                        posicao++;
                                    }
                                </tbody>

                            </table>
                            @if (alunosMenosAtivos.Count > 10)
                            {
                                <div class="linha" style="flex-direction: row-reverse; margin-top: 16px"><button id="btn-carregar" onclick="carregarMais()">Ver mais</button></div>
                            }
                        </div>

                    </div>
                </div>
            </div>
            <div class="conteudo" id="conteudo2">
                <div class="tabela-card QuadroCards">
                    <table id="tabelaAlunos">
                        <thead>
                            <tr>
                                <th>
                                    <button onclick="ordenarTabela(0)" class="bot_tab">#</button>
                                </th>
                                <th>
                                    <button onclick="ordenarTabela(1)" class="bot_tab">
                                        Nome <img src="~/css/icons/Ordenar.svg" />
                                    </button>
                                </th>
                                <th>
                                    <button onclick="ordenarTabela(2)" class="bot_tab">
                                        Último Acesso <img src="~/css/icons/Ordenar.svg" />
                                    </button>
                                </th>
                                <th>
                                    <button onclick="ordenarTabela(3)" class="bot_tab">
                                        Engajamento <img src="~/css/icons/Ordenar.svg" />
                                    </button>
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                System.Globalization.CultureInfo.CurrentCulture = new System.Globalization.CultureInfo("pt-BR");
                                int i = 0;
                                foreach (var al in Model.Alunos)
                                {
                                    i++;
                                    <tr>
                                        <td>@i</td>
                                        <td>
                                            <a asp-page="/PerfilAluno" asp-route-userId="@al.user_id">@al.nome</a>
                                        </td>
                                        <td>
                                            @{
                                                var data = DateTime.Parse(al.ultimo_acesso);
                                                var dataFormatada = $"Dia {data:dd} do mês de {data:MMMM} de {data:yyyy} às {data:HH:mm}";
                                            }
                                            @dataFormatada
                                        </td>
                                        <td>
                                            @{
                                                var engajamento = Model.AlunosEngajamento
                                                .FirstOrDefault(e => e.UserId == al.user_id)?.Engajamento;

                                                var engajamentoFormatado = engajamento.HasValue
                                                ? (engajamento < 1 ? $"{engajamento.Value:0.00}%" : $"{engajamento.Value:0}%")
                                                : "N/A";
                                            }

                                            @engajamentoFormatado
                                        </td>

                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

            </div>

            <div class="conteudo" id="conteudo3">

                @foreach (var l in Model.Cursos.Logs)
                {
                    <span>@l.date</span>
                }

            </div>
        </div>
    </div>

</div>
<script>
        const estadoOrdenacao = {
            0: true,
            1: true,
            2: true
        };
    function ordenarTabela(coluna) {
        const tabela = document.getElementById("tabelaAlunos");
        const tbody = tabela.querySelector("tbody");
        const linhas = Array.from(tbody.querySelectorAll("tr"));
        const crescente = estadoOrdenacao[coluna];

        linhas.sort((a, b) => {
            let valA = a.children[coluna].innerText.trim();
            let valB = b.children[coluna].innerText.trim();

            if (coluna === 2) { // Data
                valA = parseDataPersonalizada(valA);
                valB = parseDataPersonalizada(valB);
            } else if (coluna === 3) { // % presença
                valA = parseFloat(valA.replace('%', '')) || 0;
                valB = parseFloat(valB.replace('%', '')) || 0;
            }

            if (!isNaN(valA) && !isNaN(valB)) {
                return crescente ? valA - valB : valB - valA;
            }

            return crescente
                ? valA.localeCompare(valB)
                : valB.localeCompare(valA);
        });

        linhas.forEach(linha => tbody.appendChild(linha));
        estadoOrdenacao[coluna] = !crescente;
    }

    function parseDataPersonalizada(texto) {
        const regex = /Dia (\d{1,2}) do mês de (\w+) de (\d{4}) às (\d{2}):(\d{2})/;
        const meses = {
            'janeiro': 0, 'fevereiro': 1, 'março': 2, 'abril': 3,
            'maio': 4, 'junho': 5, 'julho': 6, 'agosto': 7,
            'setembro': 8, 'outubro': 9, 'novembro': 10, 'dezembro': 11
        };

        const match = texto.match(regex);
        if (!match) return 0;

        const dia = parseInt(match[1]);
        const mes = meses[match[2].toLowerCase()] ?? 0;
        const ano = parseInt(match[3]);
        const hora = parseInt(match[4]);
        const minuto = parseInt(match[5]);

        return new Date(ano, mes, dia, hora, minuto).getTime();
    }
    let exibidos = 10;
    function carregarMais() {
        const linhas = document.querySelectorAll('.linha.escondido');
        for (let i = 0; i < 10 && i < linhas.length; i++) {
            linhas[i].classList.remove('escondido');
            exibidos++;
        }
        if (document.querySelectorAll('.linha.escondido').length === 0) {
            document.getElementById('btn-carregar').style.display = 'none';
        }
    }

</script>
